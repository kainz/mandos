#!/usr/bin/python
# -*- mode: python; coding: utf-8 -*-
# 
# Mandos Monitor - Control and monitor the Mandos server
# 
# Copyright © 2009-2011 Teddy Hogeborn
# Copyright © 2009-2011 Björn Påhlsson
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
# Contact the authors at <mandos@fukt.bsnet.se>.
# 

from __future__ import division, absolute_import, print_function, unicode_literals

import sys
import os
import signal

import datetime

import urwid.curses_display
import urwid

from dbus.mainloop.glib import DBusGMainLoop
import gobject

import dbus

import UserList

import locale

locale.setlocale(locale.LC_ALL, '')

import logging
logging.getLogger('dbus.proxies').setLevel(logging.CRITICAL)

# Some useful constants
domain = 'se.bsnet.fukt'
server_interface = domain + '.Mandos'
client_interface = domain + '.Mandos.Client'
version = "1.2.3"

# Always run in monochrome mode
urwid.curses_display.curses.has_colors = lambda : False

# Urwid doesn't support blinking, but we want it.  Since we have no
# use for underline on its own, we make underline also always blink.
urwid.curses_display.curses.A_UNDERLINE |= (
    urwid.curses_display.curses.A_BLINK)

def isoformat_to_datetime(iso):
    "Parse an ISO 8601 date string to a datetime.datetime()"
    if not iso:
        return None
    d, t = iso.split("T", 1)
    year, month, day = d.split("-", 2)
    hour, minute, second = t.split(":", 2)
    second, fraction = divmod(float(second), 1)
    return datetime.datetime(int(year),
                             int(month),
                             int(day),
                             int(hour),
                             int(minute),
                             int(second),           # Whole seconds
                             int(fraction*1000000)) # Microseconds

class MandosClientPropertyCache(object):
    """This wraps a Mandos Client D-Bus proxy object, caches the
    properties and calls a hook function when any of them are
    changed.
    """
    def __init__(self, proxy_object=None, *args, **kwargs):
        self.proxy = proxy_object # Mandos Client proxy object
        
        self.properties = dict()
        self.proxy.connect_to_signal("PropertyChanged",
                                     self.property_changed,
                                     client_interface,
                                     byte_arrays=True)
        
        self.properties.update(
            self.proxy.GetAll(client_interface,
                              dbus_interface = dbus.PROPERTIES_IFACE))

        #XXX This break good super behaviour!
#        super(MandosClientPropertyCache, self).__init__(
#            *args, **kwargs)
    
    def property_changed(self, property=None, value=None):
        """This is called whenever we get a PropertyChanged signal
        It updates the changed property in the "properties" dict.
        """
        # Update properties dict with new value
        self.properties[property] = value


class MandosClientWidget(urwid.FlowWidget, MandosClientPropertyCache):
    """A Mandos Client which is visible on the screen.
    """
    
    def __init__(self, server_proxy_object=None, update_hook=None,
                 delete_hook=None, logger=None, *args, **kwargs):
        # Called on update
        self.update_hook = update_hook
        # Called on delete
        self.delete_hook = delete_hook
        # Mandos Server proxy object
        self.server_proxy_object = server_proxy_object
        # Logger
        self.logger = logger
        
        self._update_timer_callback_tag = None
        self._update_timer_callback_lock = 0
        self.last_checker_failed = False
        
        # The widget shown normally
        self._text_widget = urwid.Text("")
        # The widget shown when we have focus
        self._focus_text_widget = urwid.Text("")
        super(MandosClientWidget, self).__init__(
            update_hook=update_hook, delete_hook=delete_hook,
            *args, **kwargs)
        self.update()
        self.opened = False
        
        last_checked_ok = isoformat_to_datetime(self.properties
                                                ["LastCheckedOK"])
        if last_checked_ok is None:
            self.last_checker_failed = True
        else:
            self.last_checker_failed = ((datetime.datetime.utcnow()
                                         - last_checked_ok)
                                        > datetime.timedelta
                                        (milliseconds=
                                         self.properties
                                         ["Interval"]))
        
        if self.last_checker_failed:
            self.using_timer(True)
        
        if self.need_approval:
            self.using_timer(True)
        
        self.proxy.connect_to_signal("CheckerCompleted",
                                     self.checker_completed,
                                     client_interface,
                                     byte_arrays=True)
        self.proxy.connect_to_signal("CheckerStarted",
                                     self.checker_started,
                                     client_interface,
                                     byte_arrays=True)
        self.proxy.connect_to_signal("GotSecret",
                                     self.got_secret,
                                     client_interface,
                                     byte_arrays=True)
        self.proxy.connect_to_signal("NeedApproval",
                                     self.need_approval,
                                     client_interface,
                                     byte_arrays=True)
        self.proxy.connect_to_signal("Rejected",
                                     self.rejected,
                                     client_interface,
                                     byte_arrays=True)
    
    def property_changed(self, property=None, value=None):
        super(self, MandosClientWidget).property_changed(property,
                                                         value)
        if property == "ApprovalPending":
            using_timer(bool(value))
        
    def using_timer(self, flag):
        """Call this method with True or False when timer should be
        activated or deactivated.
        """
        old = self._update_timer_callback_lock
        if flag:
            self._update_timer_callback_lock += 1
        else:
            self._update_timer_callback_lock -= 1
        if old == 0 and self._update_timer_callback_lock:
            self._update_timer_callback_tag = (gobject.timeout_add
                                               (1000,
                                                self.update_timer))
        elif old and self._update_timer_callback_lock == 0:
            gobject.source_remove(self._update_timer_callback_tag)
            self._update_timer_callback_tag = None
    
    def checker_completed(self, exitstatus, condition, command):
        if exitstatus == 0:
            if self.last_checker_failed:
                self.last_checker_failed = False
                self.using_timer(False)
            #self.logger('Checker for client %s (command "%s")'
            #            ' was successful'
            #            % (self.properties["Name"], command))
            self.update()
            return
        # Checker failed
        if not self.last_checker_failed:
            self.last_checker_failed = True
            self.using_timer(True)
        if os.WIFEXITED(condition):
            self.logger('Checker for client %s (command "%s")'
                        ' failed with exit code %s'
                        % (self.properties["Name"], command,
                           os.WEXITSTATUS(condition)))
        elif os.WIFSIGNALED(condition):
            self.logger('Checker for client %s (command "%s")'
                        ' was killed by signal %s'
                        % (self.properties["Name"], command,
                           os.WTERMSIG(condition)))
        elif os.WCOREDUMP(condition):
            self.logger('Checker for client %s (command "%s")'
                        ' dumped core'
                        % (self.properties["Name"], command))
        else:
            self.logger('Checker for client %s completed'
                        ' mysteriously')
        self.update()
    
    def checker_started(self, command):
        #self.logger('Client %s started checker "%s"'
        #            % (self.properties["Name"], unicode(command)))
        pass
    
    def got_secret(self):
        self.last_checker_failed = False
        self.logger('Client %s received its secret'
                    % self.properties["Name"])
    
    def need_approval(self, timeout, default):
        if not default:
            message = 'Client %s needs approval within %s seconds'
        else:
            message = 'Client %s will get its secret in %s seconds'
        self.logger(message
                    % (self.properties["Name"], timeout/1000))
        self.using_timer(True)
    
    def rejected(self, reason):
        self.logger('Client %s was rejected; reason: %s'
                    % (self.properties["Name"], reason))
    
    def selectable(self):
        """Make this a "selectable" widget.
        This overrides the method from urwid.FlowWidget."""
        return True
    
    def rows(self, maxcolrow, focus=False):
        """How many rows this widget will occupy might depend on
        whether we have focus or not.
        This overrides the method from urwid.FlowWidget"""
        return self.current_widget(focus).rows(maxcolrow, focus=focus)
    
    def current_widget(self, focus=False):
        if focus or self.opened:
            return self._focus_widget
        return self._widget
    
    def update(self):
        "Called when what is visible on the screen should be updated."
        # How to add standout mode to a style
        with_standout = { "normal": "standout",
                          "bold": "bold-standout",
                          "underline-blink":
                              "underline-blink-standout",
                          "bold-underline-blink":
                              "bold-underline-blink-standout",
                          }

        # Rebuild focus and non-focus widgets using current properties

        # Base part of a client. Name!
        base = ('%(name)s: '
                      % {"name": self.properties["Name"]})
        if not self.properties["Enabled"]:
            message = "DISABLED"
        elif self.properties["ApprovalPending"]:
            timeout = datetime.timedelta(milliseconds
                                         = self.properties
                                         ["ApprovalDelay"])
            last_approval_request = isoformat_to_datetime(
                self.properties["LastApprovalRequest"])
            if last_approval_request is not None:
                timer = timeout - (datetime.datetime.utcnow()
                                   - last_approval_request)
            else:
                timer = datetime.timedelta()
            if self.properties["ApprovedByDefault"]:
                message = "Approval in %s. (d)eny?"
            else:
                message = "Denial in %s. (a)pprove?"
            message = message % unicode(timer).rsplit(".", 1)[0]
        elif self.last_checker_failed:
            timeout = datetime.timedelta(milliseconds
                                         = self.properties
                                         ["Timeout"])
            last_ok = isoformat_to_datetime(
                max((self.properties["LastCheckedOK"]
                     or self.properties["Created"]),
                    self.properties["LastEnabled"]))
            timer = timeout - (datetime.datetime.utcnow() - last_ok)
            message = ('A checker has failed! Time until client'
                       ' gets disabled: %s'
                           % unicode(timer).rsplit(".", 1)[0])
        else:
            message = "enabled"
        self._text = "%s%s" % (base, message)
            
        if not urwid.supports_unicode():
            self._text = self._text.encode("ascii", "replace")
        textlist = [("normal", self._text)]
        self._text_widget.set_text(textlist)
        self._focus_text_widget.set_text([(with_standout[text[0]],
                                           text[1])
                                          if isinstance(text, tuple)
                                          else text
                                          for text in textlist])
        self._widget = self._text_widget
        self._focus_widget = urwid.AttrWrap(self._focus_text_widget,
                                            "standout")
        # Run update hook, if any
        if self.update_hook is not None:
            self.update_hook()
    
    def update_timer(self):
        "called by gobject"
        self.update()
        return True             # Keep calling this
    
    def delete(self):
        if self._update_timer_callback_tag is not None:
            gobject.source_remove(self._update_timer_callback_tag)
            self._update_timer_callback_tag = None
        if self.delete_hook is not None:
            self.delete_hook(self)
    
    def render(self, maxcolrow, focus=False):
        """Render differently if we have focus.
        This overrides the method from urwid.FlowWidget"""
        return self.current_widget(focus).render(maxcolrow,
                                                 focus=focus)
    
    def keypress(self, maxcolrow, key):
        """Handle keys.
        This overrides the method from urwid.FlowWidget"""
        if key == "+":
            self.proxy.Enable(dbus_interface = client_interface)
        elif key == "-":
            self.proxy.Disable(dbus_interface = client_interface)
        elif key == "a":
            self.proxy.Approve(dbus.Boolean(True, variant_level=1),
                               dbus_interface = client_interface)
        elif key == "d":
            self.proxy.Approve(dbus.Boolean(False, variant_level=1),
                                  dbus_interface = client_interface)
        elif key == "R" or key == "_" or key == "ctrl k":
            self.server_proxy_object.RemoveClient(self.proxy
                                                  .object_path)
        elif key == "s":
            self.proxy.StartChecker(dbus_interface = client_interface)
        elif key == "S":
            self.proxy.StopChecker(dbus_interface = client_interface)
        elif key == "C":
            self.proxy.CheckedOK(dbus_interface = client_interface)
        # xxx
#         elif key == "p" or key == "=":
#             self.proxy.pause()
#         elif key == "u" or key == ":":
#             self.proxy.unpause()
#         elif key == "RET":
#             self.open()
        else:
            return key
    
    def property_changed(self, property=None, value=None,
                         *args, **kwargs):
        """Call self.update() if old value is not new value.
        This overrides the method from MandosClientPropertyCache"""
        property_name = unicode(property)
        old_value = self.properties.get(property_name)
        super(MandosClientWidget, self).property_changed(
            property=property, value=value, *args, **kwargs)
        if self.properties.get(property_name) != old_value:
            self.update()


class ConstrainedListBox(urwid.ListBox):
    """Like a normal urwid.ListBox, but will consume all "up" or
    "down" key presses, thus not allowing any containing widgets to
    use them as an excuse to shift focus away from this widget.
    """
    def keypress(self, maxcolrow, key):
        ret = super(ConstrainedListBox, self).keypress(maxcolrow, key)
        if ret in ("up", "down"):
            return
        return ret


class UserInterface(object):
    """This is the entire user interface - the whole screen
    with boxes, lists of client widgets, etc.
    """
    def __init__(self, max_log_length=1000):
        DBusGMainLoop(set_as_default=True)
        
        self.screen = urwid.curses_display.Screen()
        
        self.screen.register_palette((
                ("normal",
                 "default", "default", None),
                ("bold",
                 "default", "default", "bold"),
                ("underline-blink",
                 "default", "default", "underline"),
                ("standout",
                 "default", "default", "standout"),
                ("bold-underline-blink",
                 "default", "default", ("bold", "underline")),
                ("bold-standout",
                 "default", "default", ("bold", "standout")),
                ("underline-blink-standout",
                 "default", "default", ("underline", "standout")),
                ("bold-underline-blink-standout",
                 "default", "default", ("bold", "underline",
                                          "standout")),
                ))
        
        if urwid.supports_unicode():
            self.divider = "─" # \u2500
            #self.divider = "━" # \u2501
        else:
            #self.divider = "-" # \u002d
            self.divider = "_" # \u005f
        
        self.screen.start()
        
        self.size = self.screen.get_cols_rows()
        
        self.clients = urwid.SimpleListWalker([])
        self.clients_dict = {}
        
        # We will add Text widgets to this list
        self.log = []
        self.max_log_length = max_log_length
        
        # We keep a reference to the log widget so we can remove it
        # from the ListWalker without it getting destroyed
        self.logbox = ConstrainedListBox(self.log)
        
        # This keeps track of whether self.uilist currently has
        # self.logbox in it or not
        self.log_visible = True
        self.log_wrap = "any"
        
        self.rebuild()
        self.log_message_raw(("bold",
                              "Mandos Monitor version " + version))
        self.log_message_raw(("bold",
                              "q: Quit  ?: Help"))
        
        self.busname = domain + '.Mandos'
        self.main_loop = gobject.MainLoop()
        self.bus = dbus.SystemBus()
        mandos_dbus_objc = self.bus.get_object(
            self.busname, "/", follow_name_owner_changes=True)
        self.mandos_serv = dbus.Interface(mandos_dbus_objc,
                                          dbus_interface
                                          = server_interface)
        try:
            mandos_clients = (self.mandos_serv
                              .GetAllClientsWithProperties())
        except dbus.exceptions.DBusException:
            mandos_clients = dbus.Dictionary()
        
        (self.mandos_serv
         .connect_to_signal("ClientRemoved",
                            self.find_and_remove_client,
                            dbus_interface=server_interface,
                            byte_arrays=True))
        (self.mandos_serv
         .connect_to_signal("ClientAdded",
                            self.add_new_client,
                            dbus_interface=server_interface,
                            byte_arrays=True))
        (self.mandos_serv
         .connect_to_signal("ClientNotFound",
                            self.client_not_found,
                            dbus_interface=server_interface,
                            byte_arrays=True))
        for path, client in mandos_clients.iteritems():
            client_proxy_object = self.bus.get_object(self.busname,
                                                      path)
            self.add_client(MandosClientWidget(server_proxy_object
                                               =self.mandos_serv,
                                               proxy_object
                                               =client_proxy_object,
                                               properties=client,
                                               update_hook
                                               =self.refresh,
                                               delete_hook
                                               =self.remove_client,
                                               logger
                                               =self.log_message),
                            path=path)
    
    def client_not_found(self, fingerprint, address):
        self.log_message(("Client with address %s and fingerprint %s"
                          " could not be found" % (address,
                                                    fingerprint)))
    
    def rebuild(self):
        """This rebuilds the User Interface.
        Call this when the widget layout needs to change"""
        self.uilist = []
        #self.uilist.append(urwid.ListBox(self.clients))
        self.uilist.append(urwid.Frame(ConstrainedListBox(self.
                                                          clients),
                                       #header=urwid.Divider(),
                                       header=None,
                                       footer=
                                       urwid.Divider(div_char=
                                                     self.divider)))
        if self.log_visible:
            self.uilist.append(self.logbox)
            pass
        self.topwidget = urwid.Pile(self.uilist)
    
    def log_message(self, message):
        timestamp = datetime.datetime.now().isoformat()
        self.log_message_raw(timestamp + ": " + message)
    
    def log_message_raw(self, markup):
        """Add a log message to the log buffer."""
        self.log.append(urwid.Text(markup, wrap=self.log_wrap))
        if (self.max_log_length
            and len(self.log) > self.max_log_length):
            del self.log[0:len(self.log)-self.max_log_length-1]
        self.logbox.set_focus(len(self.logbox.body.contents),
                              coming_from="above")
        self.refresh()
    
    def toggle_log_display(self):
        """Toggle visibility of the log buffer."""
        self.log_visible = not self.log_visible
        self.rebuild()
        #self.log_message("Log visibility changed to: "
        #                 + unicode(self.log_visible))
    
    def change_log_display(self):
        """Change type of log display.
        Currently, this toggles wrapping of text lines."""
        if self.log_wrap == "clip":
            self.log_wrap = "any"
        else:
            self.log_wrap = "clip"
        for textwidget in self.log:
            textwidget.set_wrap_mode(self.log_wrap)
        #self.log_message("Wrap mode: " + self.log_wrap)
    
    def find_and_remove_client(self, path, name):
        """Find an client from its object path and remove it.
        
        This is connected to the ClientRemoved signal from the
        Mandos server object."""
        try:
            client = self.clients_dict[path]
        except KeyError:
            # not found?
            return
        self.remove_client(client, path)
    
    def add_new_client(self, path):
        client_proxy_object = self.bus.get_object(self.busname, path)
        self.add_client(MandosClientWidget(server_proxy_object
                                           =self.mandos_serv,
                                           proxy_object
                                           =client_proxy_object,
                                           update_hook
                                           =self.refresh,
                                           delete_hook
                                           =self.remove_client,
                                           logger
                                           =self.log_message),
                        path=path)
    
    def add_client(self, client, path=None):
        self.clients.append(client)
        if path is None:
            path = client.proxy.object_path
        self.clients_dict[path] = client
        self.clients.sort(None, lambda c: c.properties["Name"])
        self.refresh()
    
    def remove_client(self, client, path=None):
        self.clients.remove(client)
        if path is None:
            path = client.proxy.object_path
        del self.clients_dict[path]
        if not self.clients_dict:
            # Work around bug in Urwid 0.9.8.3 - if a SimpleListWalker
            # is completely emptied, we need to recreate it.
            self.clients = urwid.SimpleListWalker([])
            self.rebuild()
        self.refresh()
    
    def refresh(self):
        """Redraw the screen"""
        canvas = self.topwidget.render(self.size, focus=True)
        self.screen.draw_screen(self.size, canvas)
    
    def run(self):
        """Start the main loop and exit when it's done."""
        self.refresh()
        self._input_callback_tag = (gobject.io_add_watch
                                    (sys.stdin.fileno(),
                                     gobject.IO_IN,
                                     self.process_input))
        self.main_loop.run()
        # Main loop has finished, we should close everything now
        gobject.source_remove(self._input_callback_tag)
        self.screen.stop()
    
    def stop(self):
        self.main_loop.quit()
    
    def process_input(self, source, condition):
        keys = self.screen.get_input()
        translations = { "ctrl n": "down",      # Emacs
                         "ctrl p": "up",        # Emacs
                         "ctrl v": "page down", # Emacs
                         "meta v": "page up",   # Emacs
                         " ": "page down",      # less
                         "f": "page down",      # less
                         "b": "page up",        # less
                         "j": "down",           # vi
                         "k": "up",             # vi
                         }
        for key in keys:
            try:
                key = translations[key]
            except KeyError:    # :-)
                pass
            
            if key == "q" or key == "Q":
                self.stop()
                break
            elif key == "window resize":
                self.size = self.screen.get_cols_rows()
                self.refresh()
            elif key == "\f":  # Ctrl-L
                self.refresh()
            elif key == "l" or key == "D":
                self.toggle_log_display()
                self.refresh()
            elif key == "w" or key == "i":
                self.change_log_display()
                self.refresh()
            elif key == "?" or key == "f1" or key == "esc":
                if not self.log_visible:
                    self.log_visible = True
                    self.rebuild()
                self.log_message_raw(("bold",
                                      "  ".
                                      join(("q: Quit",
                                            "?: Help",
                                            "l: Log window toggle",
                                            "TAB: Switch window",
                                            "w: Wrap (log)"))))
                self.log_message_raw(("bold",
                                      "  "
                                      .join(("Clients:",
                                             "+: Enable",
                                             "-: Disable",
                                             "R: Remove",
                                             "s: Start new checker",
                                             "S: Stop checker",
                                             "C: Checker OK",
                                             "a: Approve",
                                             "d: Deny"))))
                self.refresh()
            elif key == "tab":
                if self.topwidget.get_focus() is self.logbox:
                    self.topwidget.set_focus(0)
                else:
                    self.topwidget.set_focus(self.logbox)
                self.refresh()
            #elif (key == "end" or key == "meta >" or key == "G"
            #      or key == ">"):
            #    pass            # xxx end-of-buffer
            #elif (key == "home" or key == "meta <" or key == "g"
            #      or key == "<"):
            #    pass            # xxx beginning-of-buffer
            #elif key == "ctrl e" or key == "$":
            #    pass            # xxx move-end-of-line
            #elif key == "ctrl a" or key == "^":
            #    pass            # xxx move-beginning-of-line
            #elif key == "ctrl b" or key == "meta (" or key == "h":
            #    pass            # xxx left
            #elif key == "ctrl f" or key == "meta )" or key == "l":
            #    pass            # xxx right
            #elif key == "a":
            #    pass            # scroll up log
            #elif key == "z":
            #    pass            # scroll down log
            elif self.topwidget.selectable():
                self.topwidget.keypress(self.size, key)
                self.refresh()
        return True

ui = UserInterface()
try:
    ui.run()
except KeyboardInterrupt:
    ui.screen.stop()
except Exception, e:
    ui.log_message(unicode(e))
    ui.screen.stop()
    raise
